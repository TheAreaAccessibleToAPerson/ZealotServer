namespace Butterfly.system.objects.main
{
    /// <summary>
    /// Описывает методы для перенаправления данных в другие участки программы. 
    /// </summary>
    public interface IRedirect<T1, T2, T3, T4>
    {
        /// <summary>
        /// Перенаправляет данные. 
        /// Метод можно обернуть в конструкцию TryIncrementEvent() который в случае возрата true защитит обьект от преждевременной
        /// остановки что позволит методу выполнится до того как обьект начнет останавливаться. 
        /// Возрат false будет означать что обьект начал процесс остановки. Так же нужно будет разблакировать обьект с помощью
        /// метода DecrementEvent();
        /// </summary>
        /// <param name="action">Куда перенаправить данные.</param>
        public void output_to(System.Action<T1, T2, T3, T4> action);

        /// <summary>
        /// Перенаправляет данные и передает процесс выполнение в событие имя которого будет указано вторым параметром.
        /// Метод можно обернуть в конструкцию TryIncrementEvent() который в случае возрата true защитит обьект от преждевременной
        /// остановки что позволит методу выполнится до того как обьект начнет останавливаться. 
        /// Возрат false будет означать что обьект начал процесс остановки. Так же нужно будет разблакировать обьект с помощью
        /// метода DecrementEvent();
        /// </summary>
        /// <param name="action">Куда перенаправить данные.</param>
        /// <param name="name">Имя события.</param>
        public void output_to(System.Action<T1, T2, T3, T4> action, string name);

        /// <summary>
        /// Перенаправляет данные и передает процесс выполнение в событие имя которого будет указано вторым параметром.
        /// Если к моменту вызова метода обьект приступил к остановки до входдные данные в action продублируются в safe метод.
        /// Метод можно обернуть в конструкцию TryIncrementEvent() который в случае возрата true защитит обьект от преждевременной
        /// остановки что позволит методу выполнится до того как обьект начнет останавливаться. 
        /// Возрат false будет означать что обьект начал процесс остановки. Так же нужно будет разблакировать обьект с помощью
        /// метода DecrementEvent();
        /// </summary>
        /// <param name="action">Куда перенаправить данные.</param>
        /// <param name="name">Имя события.</param>
        /// <param name="safe">Метод в который продублируются входнные данные которые должны были попасть в action.</param>
        public void output_to(System.Action<T1, T2, T3, T4> action, string name, System.Action<T1, T2, T3, T4> safe);

        /// <summary>
        /// Перенаправляет данные. 
        /// Метод можно обернуть в конструкцию TryIncrementEvent() который в случае возрата true защитит обьект от преждевременной
        /// остановки что позволит методу выполнится до того как обьект начнет останавливаться. 
        /// Возрат false будет означать что обьект начал процесс остановки. Так же нужно будет разблакировать обьект с помощью
        /// метода DecrementEvent();
        /// </summary>
        /// <param name="func">Куда перенаправить данные.</param>
        public IRedirect<R> output_to<R>(System.Func<T1, T2, T3, T4, R> func);

        /// <summary>
        /// Перенаправляет данные и передает просесс выполнения в событие имя которого будет указана вторым параметом.
        /// </summary>
        /// <param name="func">Куда перенаправить данные.</param>
        /// <param name="name">Имя события.</param>
        public IRedirect<R> output_to<R>(System.Func<T1, T2, T3, T4, R> func, string name);

        /// <summary>
        /// Перенаправляет данные и передает просесс выполнения в событие имя которого будет указана вторым параметом.
        /// Если к моменту вызова метода обьект приступил к остановки до входдные данные в action продублируются в safe метод.
        /// </summary>
        /// <param name="func">Куда перенаправить данные.</param>
        /// <param name="name">Имя события.</param>
        /// <param name="safe">Метод в который продублируются входнные данные которые должны были попасть в action.</param>
        public IRedirect<R> output_to<R>(System.Func<T1, T2, T3, T4, R> func, string name, System.Action<T1, T2, T3, T4> safe);

        /// <summary>
        /// Перенаправит данные в listen_message с именем указаным первым параметром. 
        /// </summary>
        /// <param name="name"></param>
        public void send_message_to(string name);

        /// <summary>
        /// Перенаправит данные в listen_echo с именем указаным первым параметром, и получит ответ в .output_to  
        /// указаный далее. Тип данных который придет в ответе отличается от отправленого.
        /// </summary>
        /// <param name="name">Имя listen_echo</param>
        /// <returns></returns>
        public IRedirect<R> send_echo_to<R>(string name);

        /// <summary>
        /// Перенаправит данные в listen_echo с именем указаным первым параметром, и получит ответ в .output_to  
        /// указаный далее. Тип данных который придет в ответе отличается от отправленого.
        /// </summary>
        /// <param name="name">Имя listen_echo</param>
        /// <returns></returns>
        public IRedirect<R1, R2> send_echo_to<R1, R2>(string name);

        /// <summary>
        /// Перенаправит данные в listen_echo с именем указаным первым параметром, и получит ответ в .output_to  
        /// указаный далее. Тип данных который придет в ответе отличается от отправленого.
        /// </summary>
        /// <param name="name">Имя listen_echo</param>
        /// <returns></returns>
        public IRedirect<R1, R2, R3> send_echo_to<R1, R2, R3>(string name);

        /// <summary>
        /// Перенаправит данные в listen_echo с именем указаным первым параметром, и получит ответ в .output_to  
        /// указаный далее. Тип данных который придет в ответе отличается от отправленого.
        /// </summary>
        /// <param name="name">Имя listen_echo</param>
        /// <returns></returns>
        public IRedirect<R1, R2, R3, R4> send_echo_to<R1, R2, R3, R4>(string name);

        /// <summary>
        /// Перенаправит данные в listen_echo с именем указаным первым параметром, и получит ответ в .output_to  
        /// указаный далее. Тип данных который придет в ответе отличается от отправленого.
        /// </summary>
        /// <param name="name">Имя listen_echo</param>
        /// <returns></returns>
        public IRedirect<R1, R2, R3, R4, R5> send_echo_to<R1, R2, R3, R4, R5>(string name);

        /// <summary>
        /// Перенаправляет данные и реализует возвожность вернуть результат содержащий более одного значения.
        /// Метод можно обернуть в конструкцию TryIncrementEvent() который в случае возрата true защитит обьект от преждевременной
        /// остановки что позволит методу выполнится до того как обьект начнет останавливаться. 
        /// Возрат false будет означать что обьект начал процесс остановки. Так же нужно будет разблакировать обьект с помощью
        /// метода DecrementEvent();
        /// </summary>
        public IRedirect<R> output_to<R>(System.Action<T1, T2, T3, T4, IReturn<R>> action);

        /// <summary>
        /// Перенаправляет данные и реализует возвожность вернуть результат содержащий более одного значения.
        /// Метод можно обернуть в конструкцию TryIncrementEvent() который в случае возрата true защитит обьект от преждевременной
        /// остановки что позволит методу выполнится до того как обьект начнет останавливаться. 
        /// Возрат false будет означать что обьект начал процесс остановки. Так же нужно будет разблакировать обьект с помощью
        /// метода DecrementEvent();
        /// </summary>
        public IRedirect<R1, R2> output_to<R1, R2>(System.Action<T1, T2, T3, T4, IReturn<R1, R2>> action);

        /// <summary>
        /// Перенаправляет данные и реализует возвожность вернуть результат содержащий более одного значения.
        /// Метод можно обернуть в конструкцию TryIncrementEvent() который в случае возрата true защитит обьект от преждевременной
        /// остановки что позволит методу выполнится до того как обьект начнет останавливаться. 
        /// Возрат false будет означать что обьект начал процесс остановки. Так же нужно будет разблакировать обьект с помощью
        /// метода DecrementEvent();
        /// </summary>
        public IRedirect<R1, R2, R3> output_to<R1, R2, R3>(System.Action<T1, T2, T3, T4, IReturn<R1, R2, R3>> action);

        /// <summary>
        /// Перенаправляет данные и реализует возвожность вернуть результат содержащий более одного значения.
        /// Метод можно обернуть в конструкцию TryIncrementEvent() который в случае возрата true защитит обьект от преждевременной
        /// остановки что позволит методу выполнится до того как обьект начнет останавливаться. 
        /// Возрат false будет означать что обьект начал процесс остановки. Так же нужно будет разблакировать обьект с помощью
        /// метода DecrementEvent();
        /// </summary>
        public IRedirect<R1, R2, R3, R4> output_to<R1, R2, R3, R4>(System.Action<T1, T2, T3, T4, IReturn<R1, R2, R3, R4>> action);

        /// <summary>
        /// Перенаправляет данные и реализует возвожность вернуть результат содержащий более одного значения.
        /// </summary>
        public IRedirect<R1, R2, R3, R4, R5> output_to<R1, R2, R3, R4, R5>(System.Action<T1, T2, T3, T4, IReturn<R1, R2, R3, R4, R5>> action);

        /// <summary>
        /// Перенаправляет данные реализует возвожность вернуть результат содержащий более одного значения.
        /// Процесс выполнения будут передан в событие с именем указаным вторым параметром.
        /// Если до того времени как событие начнет выполнять данный метод обьект перейдет в состояние
        /// остановки, то передав 3 параметом safe метод, в него будут переданы входные данные которые 
        /// должен был обработать данный метод.Если событие все же начало выполнять работу описаную в данном методе,
        /// то обьект гарантировано не неначнет свою остановку до тех пор пока вся цепочка output_to не закончит свою работу.
        /// За исключением если вы повторно предали другой метод на выполнение в событие.
        /// </summary>
        /// <param name="action">Метод</param>
        /// <param name="name">Имя события</param>
        /// <returns></returns>
        public IRedirect<R> output_to<R>(System.Action<T1, T2, T3, T4, IReturn<R>> action, string name);

        /// <summary>
        /// Перенаправляет данные реализует возвожность вернуть результат содержащий более одного значения.
        /// Процесс выполнения будут передан в событие с именем указаным вторым параметром.
        /// Если до того времени как событие начнет выполнять данный метод обьект перейдет в состояние
        /// остановки, то передав 3 параметом safe метод, в него будут переданы входные данные которые 
        /// должен был обработать данный метод.Если событие все же начало выполнять работу описаную в данном методе,
        /// то обьект гарантировано не неначнет свою остановку до тех пор пока вся цепочка output_to не закончит свою работу.
        /// За исключением если вы повторно предали другой метод на выполнение в событие.
        /// </summary>
        /// <param name="action">Метод</param>
        /// <param name="name">Имя события</param>
        /// <returns></returns>
        public IRedirect<R1, R2> output_to<R1, R2>(System.Action<T1, T2, T3, T4, IReturn<R1, R2>> action, string name);

        /// <summary>
        /// Перенаправляет данные реализует возвожность вернуть результат содержащий более одного значения.
        /// Процесс выполнения будут передан в событие с именем указаным вторым параметром.
        /// Если до того времени как событие начнет выполнять данный метод обьект перейдет в состояние
        /// остановки, то передав 3 параметом safe метод, в него будут переданы входные данные которые 
        /// должен был обработать данный метод.Если событие все же начало выполнять работу описаную в данном методе,
        /// то обьект гарантировано не неначнет свою остановку до тех пор пока вся цепочка output_to не закончит свою работу.
        /// За исключением если вы повторно предали другой метод на выполнение в событие.
        /// </summary>
        /// <param name="action">Метод</param>
        /// <param name="name">Имя события</param>
        /// <returns></returns>
        public IRedirect<R1, R2, R3> output_to<R1, R2, R3>(System.Action<T1, T2, T3, T4, IReturn<R1, R2, R3>> action, string name);

        /// <summary>
        /// Перенаправляет данные реализует возвожность вернуть результат содержащий более одного значения.
        /// Процесс выполнения будут передан в событие с именем указаным вторым параметром.
        /// Если до того времени как событие начнет выполнять данный метод обьект перейдет в состояние
        /// остановки, то передав 3 параметом safe метод, в него будут переданы входные данные которые 
        /// должен был обработать данный метод.Если событие все же начало выполнять работу описаную в данном методе,
        /// то обьект гарантировано не неначнет свою остановку до тех пор пока вся цепочка output_to не закончит свою работу.
        /// За исключением если вы повторно предали другой метод на выполнение в событие.
        /// </summary>
        /// <param name="action">Метод</param>
        /// <param name="name">Имя события</param>
        /// <returns></returns>
        public IRedirect<R1, R2, R3, R4> output_to<R1, R2, R3, R4>(System.Action<T1, T2, T3, T4, IReturn<R1, R2, R3, R4>> action, string name);

        /// <summary>
        /// Перенаправляет данные реализует возвожность вернуть результат содержащий более одного значения.
        /// Процесс выполнения будут передан в событие с именем указаным вторым параметром.
        /// Если до того времени как событие начнет выполнять данный метод обьект перейдет в состояние
        /// остановки, то передав 3 параметом safe метод, в него будут переданы входные данные которые 
        /// должен был обработать данный метод.Если событие все же начало выполнять работу описаную в данном методе,
        /// то обьект гарантировано не неначнет свою остановку до тех пор пока вся цепочка output_to не закончит свою работу.
        /// За исключением если вы повторно предали другой метод на выполнение в событие.
        /// </summary>
        /// <param name="action">Метод</param>
        /// <param name="name">Имя события</param>
        /// <returns></returns>
        public IRedirect<R1, R2, R3, R4, R5> output_to<R1, R2, R3, R4, R5>(System.Action<T1, T2, T3, T4, IReturn<R1, R2, R3, R4, R5>> action, string name);

        /// <summary>
        /// Перенаправляет данные реализует возвожность вернуть результат содержащий более одного значения.
        /// Процесс выполнения будут передан в событие с именем указаным вторым параметром.
        /// Если событие все же начало выполнять работу описаную в данном методе,
        /// то обьект гарантировано не неначнет свою остановку до тех пор пока вся цепочка output_to не закончит свою работу.
        /// За исключением если вы повторно предали другой метод на выполнение в событие.
        /// </summary>
        /// <param name="action">Метод</param>
        /// <param name="name">Имя события.</param>
        /// <param name="safe">Метод который вызовется в случае если обьект приступил к остановки.</param>
        /// <returns></returns>
        public IRedirect<R> output_to<R>(System.Action<T1, T2, T3, T4, IReturn<R>> action, string name, System.Action<T1, T2, T3, T4> safe);

        /// <summary>
        /// Перенаправляет данные реализует возвожность вернуть результат содержащий более одного значения.
        /// Процесс выполнения будут передан в событие с именем указаным вторым параметром.
        /// Если событие все же начало выполнять работу описаную в данном методе,
        /// то обьект гарантировано не неначнет свою остановку до тех пор пока вся цепочка output_to не закончит свою работу.
        /// За исключением если вы повторно предали другой метод на выполнение в событие.
        /// </summary>
        /// <param name="action">Метод</param>
        /// <param name="name">Имя события.</param>
        /// <param name="safe">Метод который вызовется в случае если обьект приступил к остановки.</param>
        /// <returns></returns>
        public IRedirect<R1, R2> output_to<R1, R2>(System.Action<T1, T2, T3, T4, IReturn<R1, R2>> action, string name, System.Action<T1, T2, T3, T4> safe);

        /// <summary>
        /// Перенаправляет данные реализует возвожность вернуть результат содержащий более одного значения.
        /// Процесс выполнения будут передан в событие с именем указаным вторым параметром.
        /// Если событие все же начало выполнять работу описаную в данном методе,
        /// то обьект гарантировано не неначнет свою остановку до тех пор пока вся цепочка output_to не закончит свою работу.
        /// За исключением если вы повторно предали другой метод на выполнение в событие.
        /// </summary>
        /// <param name="action">Метод</param>
        /// <param name="name">Имя события.</param>
        /// <param name="safe">Метод который вызовется в случае если обьект приступил к остановки.</param>
        /// <returns></returns>
        public IRedirect<R1, R2, R3> output_to<R1, R2, R3>(System.Action<T1, T2, T3, T4, IReturn<R1, R2, R3>> action, string name, System.Action<T1, T2, T3, T4> safe);

        /// <summary>
        /// Перенаправляет данные реализует возвожность вернуть результат содержащий более одного значения.
        /// Процесс выполнения будут передан в событие с именем указаным вторым параметром.
        /// Если событие все же начало выполнять работу описаную в данном методе,
        /// то обьект гарантировано не неначнет свою остановку до тех пор пока вся цепочка output_to не закончит свою работу.
        /// За исключением если вы повторно предали другой метод на выполнение в событие.
        /// </summary>
        /// <param name="action">Метод</param>
        /// <param name="name">Имя события.</param>
        /// <param name="safe">Метод который вызовется в случае если обьект приступил к остановки.</param>
        /// <returns></returns>
        public IRedirect<R1, R2, R3, R4> output_to<R1, R2, R3, R4>(System.Action<T1, T2, T3, T4, IReturn<R1, R2, R3, R4>> action, string name, System.Action<T1, T2, T3, T4> safe);

        /// <summary>
        /// Перенаправляет данные реализует возвожность вернуть результат содержащий более одного значения.
        /// Процесс выполнения будут передан в событие с именем указаным вторым параметром.
        /// Если событие все же начало выполнять работу описаную в данном методе,
        /// то обьект гарантировано не неначнет свою остановку до тех пор пока вся цепочка output_to не закончит свою работу.
        /// За исключением если вы повторно предали другой метод на выполнение в событие.
        /// </summary>
        /// <param name="action">Метод</param>
        /// <param name="name">Имя события.</param>
        /// <param name="safe">Метод который вызовется в случае если обьект приступил к остановки.</param>
        /// <returns></returns>
        public IRedirect<R1, R2, R3, R4, R5> output_to<R1, R2, R3, R4, R5>(System.Action<T1, T2, T3, T4, IReturn<R1, R2, R3, R4, R5>> action, string name, System.Action<T1, T2, T3, T4> safe);
    }
}